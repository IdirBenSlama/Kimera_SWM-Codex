version: '3.8'

# KIMERA SWM Production Environment with GPU Support
# Resolves port conflicts and adds comprehensive monitoring
# Created: 2025-08-02 by Kimera Autonomous Architect

services:
  # PostgreSQL Database with pgvector extension
  postgres:
    image: pgvector/pgvector:pg16
    container_name: kimera_postgres_prod
    environment:
      POSTGRES_USER: kimera
      POSTGRES_PASSWORD: kimera_secure_pass_2025
      POSTGRES_DB: kimera_swm
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
      POSTGRES_HOST_AUTH_METHOD: md5
      POSTGRES_SHARED_PRELOAD_LIBRARIES: pg_stat_statements
    ports:
      - "5432:5432"
    volumes:
      - kimera_postgres_data_prod:/var/lib/postgresql/data
      - ./init_db_production.sql:/docker-entrypoint-initdb.d/init.sql:ro
      - ./postgres_config/postgresql.conf:/etc/postgresql/postgresql.conf:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U kimera -d kimera_swm"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - kimera_production_network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 1G

  # PostgreSQL Exporter for Prometheus
  postgres_exporter:
    image: prometheuscommunity/postgres-exporter:latest
    container_name: kimera_postgres_exporter
    environment:
      DATA_SOURCE_NAME: "postgresql://kimera:kimera_secure_pass_2025@postgres:5432/kimera_swm?sslmode=disable"
      PG_EXPORTER_EXTEND_QUERY_PATH: /etc/postgres_exporter/queries.yaml
    ports:
      - "9187:9187"
    volumes:
      - ./postgres_exporter/queries.yaml:/etc/postgres_exporter/queries.yaml:ro
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - kimera_production_network
    restart: unless-stopped

  # Neo4j Graph Database for semantic relationships
  neo4j:
    image: neo4j:5.15-community
    container_name: kimera_neo4j_prod
    environment:
      NEO4J_AUTH: neo4j/kimera_graph_pass_2025
      NEO4J_dbms_default__database: kimera_graph
      NEO4J_dbms_security_procedures_unrestricted: gds.*,apoc.*
      NEO4J_dbms_security_procedures_allowlist: gds.*,apoc.*
      NEO4J_PLUGINS: '["apoc", "graph-data-science"]'
      NEO4J_dbms_memory_heap_initial__size: 1G
      NEO4J_dbms_memory_heap_max__size: 4G
      NEO4J_dbms_memory_pagecache_size: 2G
      NEO4J_dbms_jvm_additional: "-XX:+ExitOnOutOfMemoryError -XX:+UseG1GC"
      NEO4J_dbms_logs_query_enabled: "true"
      NEO4J_metrics_enabled: "true"
      NEO4J_metrics_prometheus_enabled: "true"
      NEO4J_metrics_prometheus_endpoint: "0.0.0.0:2004"
    ports:
      - "7474:7474"   # HTTP
      - "7687:7687"   # Bolt
      - "2004:2004"   # Metrics
    volumes:
      - kimera_neo4j_data_prod:/data
      - kimera_neo4j_logs_prod:/logs
      - kimera_neo4j_import_prod:/var/lib/neo4j/import
      - kimera_neo4j_plugins_prod:/plugins
    healthcheck:
      test: ["CMD", "cypher-shell", "-u", "neo4j", "-p", "kimera_graph_pass_2025", "RETURN 1 AS health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    networks:
      - kimera_production_network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 6G
        reservations:
          memory: 2G

  # Redis for caching and message queuing
  redis:
    image: redis:7-alpine
    container_name: kimera_redis_prod
    environment:
      REDIS_PASSWORD: kimera_cache_pass_2025
    ports:
      - "6379:6379"
    volumes:
      - kimera_redis_data_prod:/data
      - ./redis_config/redis.conf:/etc/redis/redis.conf:ro
    command: redis-server /etc/redis/redis.conf
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "kimera_cache_pass_2025", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - kimera_production_network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  # Redis Exporter for Prometheus
  redis_exporter:
    image: oliver006/redis_exporter:latest
    container_name: kimera_redis_exporter
    environment:
      REDIS_ADDR: redis://redis:6379
      REDIS_PASSWORD: kimera_cache_pass_2025
    ports:
      - "9121:9121"
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - kimera_production_network
    restart: unless-stopped

  # KIMERA Main Application with GPU Support
  kimera_app:
    build:
      context: ../../
      dockerfile: config/docker/Dockerfile.gpu
    container_name: kimera_app_prod
    environment:
      # Database configuration
      KIMERA_DATABASE_URL: postgresql://kimera:kimera_secure_pass_2025@postgres:5432/kimera_swm
      KIMERA_DB_POOL_SIZE: 50
      
      # Graph database
      NEO4J_URI: bolt://neo4j:7687
      NEO4J_USER: neo4j
      NEO4J_PASSWORD: kimera_graph_pass_2025
      
      # Redis configuration
      REDIS_URL: redis://:kimera_cache_pass_2025@redis:6379
      
      # Application settings
      KIMERA_ENV: production
      KIMERA_SECRET_KEY: IJIhXeOxdqEbF_YdePBV8bg8JKegIujEpKs5av-29AA
      KIMERA_LOG_LEVEL: INFO
      
      # API Settings
      KIMERA_HOST: 0.0.0.0
      KIMERA_PORT: 8000
      KIMERA_WORKERS: 4
      
      # GPU Configuration
      CUDA_VISIBLE_DEVICES: 0
      KIMERA_GPU_ENABLED: "true"
      KIMERA_GPU_MEMORY_FRACTION: 0.8
      KIMERA_ENABLE_MIXED_PRECISION: "true"
      
      # Monitoring
      PROMETHEUS_MULTIPROC_DIR: /tmp/prometheus_multiproc
      KIMERA_METRICS_ENABLED: "true"
      
      # Security
      KIMERA_CORS_ORIGINS: "*"
      
    ports:
      - "8000:8000"    # Main API
      - "8001:8001"    # Metrics endpoint
      - "8002:8002"    # Health/Status
    volumes:
      - kimera_data_prod:/app/data
      - kimera_logs_prod:/app/logs
      - kimera_models_prod:/app/models
      - kimera_cache_prod:/app/cache
      - /tmp:/tmp
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      neo4j:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - kimera_production_network
    restart: unless-stopped
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]

  # Prometheus for monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: kimera_prometheus_prod
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus_production.yml:/etc/prometheus/prometheus.yml:ro
      - ./prometheus_config/alerts.yml:/etc/prometheus/alerts.yml:ro
      - kimera_prometheus_data_prod:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--storage.tsdb.retention.size=10GB'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
      - '--log.level=info'
    networks:
      - kimera_production_network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 1G

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: kimera_grafana_prod
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: kimera_grafana_pass_2025
      GF_USERS_ALLOW_SIGN_UP: "false"
      GF_INSTALL_PLUGINS: grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - kimera_grafana_data_prod:/var/lib/grafana
      - ./grafana_config/provisioning:/etc/grafana/provisioning:ro
    depends_on:
      - prometheus
    networks:
      - kimera_production_network
    restart: unless-stopped

  # Node Exporter for system metrics
  node_exporter:
    image: prom/node-exporter:latest
    container_name: kimera_node_exporter
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    networks:
      - kimera_production_network
    restart: unless-stopped

  # Database Administration Tool (Port changed to resolve conflict)
  adminer:
    image: adminer:latest
    container_name: kimera_adminer_prod
    ports:
      - "8090:8080"  # Changed from 8080 to 8090 to resolve conflict
    environment:
      ADMINER_DEFAULT_SERVER: postgres
      ADMINER_DESIGN: pepa-linha
    networks:
      - kimera_production_network
    restart: unless-stopped
    depends_on:
      - postgres

  # Alert Manager for Prometheus alerts
  alertmanager:
    image: prom/alertmanager:latest
    container_name: kimera_alertmanager
    ports:
      - "9093:9093"
    volumes:
      - ./alertmanager_config/alertmanager.yml:/etc/alertmanager/alertmanager.yml:ro
      - kimera_alertmanager_data_prod:/alertmanager
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
      - '--web.external-url=http://localhost:9093'
    networks:
      - kimera_production_network
    restart: unless-stopped

  # Load Testing Service (Locust)
  load_tester:
    build:
      context: ../../
      dockerfile: config/docker/Dockerfile.loadtest
    container_name: kimera_load_tester
    ports:
      - "8089:8089"
    environment:
      LOCUST_HOST: http://kimera_app_prod:8000
      LOCUST_WEB_PORT: 8089
    volumes:
      - ./load_testing:/mnt/locust
    networks:
      - kimera_production_network
    restart: "no"
    profiles:
      - testing

volumes:
  kimera_postgres_data_prod:
    name: kimera_postgres_data_prod
  kimera_neo4j_data_prod:
    name: kimera_neo4j_data_prod
  kimera_neo4j_logs_prod:
    name: kimera_neo4j_logs_prod
  kimera_neo4j_import_prod:
    name: kimera_neo4j_import_prod
  kimera_neo4j_plugins_prod:
    name: kimera_neo4j_plugins_prod
  kimera_redis_data_prod:
    name: kimera_redis_data_prod
  kimera_data_prod:
    name: kimera_data_prod
  kimera_logs_prod:
    name: kimera_logs_prod
  kimera_models_prod:
    name: kimera_models_prod
  kimera_cache_prod:
    name: kimera_cache_prod
  kimera_prometheus_data_prod:
    name: kimera_prometheus_data_prod
  kimera_grafana_data_prod:
    name: kimera_grafana_data_prod
  kimera_alertmanager_data_prod:
    name: kimera_alertmanager_data_prod

networks:
  kimera_production_network:
    name: kimera_production_network
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16