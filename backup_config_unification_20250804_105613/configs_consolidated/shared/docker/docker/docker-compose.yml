version: '3.8'

services:
  # PostgreSQL Database with pgvector extension
  postgres:
    image: pgvector/pgvector:pg16
    container_name: kimera_postgres
    environment:
      POSTGRES_USER: kimera
      POSTGRES_PASSWORD: kimera_secure_pass_2025
      POSTGRES_DB: kimera_swm
    ports:
      - "5432:5432"
    volumes:
      - kimera_postgres_data:/var/lib/postgresql/data
      - ./init_db.sql:/docker-entrypoint-initdb.d/init.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U kimera -d kimera_swm"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - kimera_network

  # Redis for caching and message queuing
  redis:
    image: redis:7-alpine
    container_name: kimera_redis
    ports:
      - "6379:6379"
    volumes:
      - kimera_redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - kimera_network

  # KIMERA Main Application
  kimera_app:
    build:
      context: ../../
      dockerfile: config/docker/Dockerfile
    container_name: kimera_app
    environment:
      # Database configuration
      KIMERA_DATABASE_URL: postgresql://kimera:kimera_secure_pass_2025@postgres:5432/kimera_swm
      KIMERA_DB_POOL_SIZE: 20
      
      # Redis configuration
      REDIS_URL: redis://redis:6379
      
      # Application settings
      KIMERA_ENV: docker
      KIMERA_SECRET_KEY: IJIhXeOxdqEbF_YdePBV8bg8JKegIujEpKs5av-29AA
      KIMERA_LOG_LEVEL: INFO
      
      # API Settings
      KIMERA_HOST: 0.0.0.0
      KIMERA_PORT: 8000
      
      # Security
      KIMERA_CORS_ORIGINS: "*"
      
    ports:
      - "8000:8000"
      - "8001:8001"
      - "8002:8002"
    volumes:
      - kimera_data:/app/data
      - kimera_logs:/app/logs
      - kimera_models:/app/models
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - kimera_network
    restart: unless-stopped

  # Optional: Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: kimera_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ../../config/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - kimera_prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - kimera_network

volumes:
  kimera_postgres_data:
  kimera_redis_data:
  kimera_data:
  kimera_logs:
  kimera_models:
  kimera_prometheus_data:

networks:
  kimera_network:
    driver: bridge
